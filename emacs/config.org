#+TITLE: Sahil's Emacs Configuration
#+AUTHOR: Sahil Gautam

* Emacs
** Evil Mode

#+begin_src emacs-lisp
  (use-package evil
    :ensure t ; Automatically install Evil if not already installed
    :config
    (evil-mode 1)) ; Enable Evil mode on startup
  (evil-set-undo-system 'undo-redo)
#+end_src

** Doom Themes

#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    ;; (load-theme 'doom-one t)

    (load-theme 'doom-acario-dark t)
    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-palenight") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))  
#+end_src

** TODO Doom Modline

#+begin_src emacs-lisp

#+end_src

** UI Enhancements

#+begin_src emacs-lisp
  (setq scroll-conservatively 100)
  (setq ring-bell-function 'ignore)
  (when window-system (global-hl-line-mode t))
  (when window-system (global-prettify-symbols-mode t))
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (setq-default mode-line-format nil)
  (setq initial-scratch-message "")
  (setq inhibit-startup-message t)
  (setq standard-indent 2)
  (global-hl-line-mode -1)


  (defun display-startup-echo-area-message ()
    (message ""))
  (setq minibuffer-eldoc-mode nil)

  (fringe-mode 0)


  (setq inhibit-startup-echo-area-message "")

  (setq inhibit-startup-message t)
  ;; (global-display-line-numbers-mode nil)
  ;; (setq display-line-numbers-type 'relative
  ;;       display-line-numbers-current-absolute nil
  ;;       display-line-numbers-widen t)
  ;; (add-hook 'prog-mode-hook (lambda () (display-line-numbers-mode 'relative)))

  (setq org-image-actual-width nil)
  (setq org-image-actual-width (list 650)) ;; works!
#+end_src

** Keybindings

#+begin_src emacs-lisp
  (use-package evil-leader
    :ensure t
    :config
    (global-evil-leader-mode)
    (evil-leader/set-leader "<SPC>")
    (evil-leader/set-key
      "w" 'save-buffer
      "W" 'evil-write-all
      "mp" 'dashboard-open
      "mm" 'bookmark-set
      "." 'find-file
      "q" 'evil-quit
      "t" 'new-vterm-tile
      "ot" 'org-roam-buffer-toggle
      "of" 'org-roam-node-find
      "oi" 'org-roam-node-insert
      "r" 'org-babel-remove-result-one-or-many
      "x" 'org-babel-execute-src-block
      "sh" 'evil-window-split
      "sv" 'evil-window-vsplit
      "e" 'treemacs
      "1" (lambda () (interactive) (jump-to-nth-bookmark 1))
      "2" (lambda () (interactive) (jump-to-nth-bookmark 2))
      "3" (lambda () (interactive) (jump-to-nth-bookmark 3))
      "4" (lambda () (interactive) (jump-to-nth-bookmark 4))
      "5" (lambda () (interactive) (jump-to-nth-bookmark 5)))
    )

					  ; Window Navigation Keybindings Ctrl+VI
  (global-set-key (kbd "C-h") 'evil-window-left)
					  ; Not Working for some reason
					  ; (global-set-key (kbd "C-k") 'windmove-down)
  (global-set-key (kbd "C-k") 'windmove-up)
  (global-set-key (kbd "C-l") 'evil-window-right)

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (add-hook 'org-mode-hook (lambda ()
			     (evil-define-key 'normal org-mode-map (kbd "TAB") 'org-cycle)))
					  ; (define-key evil-insert-state-map (kbd "TAB") 'indent-for-tab-command)



  (global-set-key (kbd "C-o") 'previous-buffer)
  (global-set-key (kbd "C-i") 'next-buffer)

					  ; If pressed <TAB> in evil-insert mode, then it's a tabspace.
  (setq-default tab-width 2)
  (add-hook 'evil-insert-state-entry-hook
  (lambda ()
    (define-key evil-insert-state-map (kbd "TAB") 'tab-to-tab-stop)))

  (add-hook 'evil-normal-state-entry-hook
  (lambda ()
    (define-key evil-insert-state-map (kbd "TAB") 'tab-to-tab-stop)))
#+end_src

#+RESULTS:
| lambda | nil | (define-key evil-insert-state-map (kbd TAB) 'tab-to-tab-stop) |

#
** Dashboard

#+begin_src emacs-lisp
  ;; use-package with package.el:
  (use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))
  ;; use-package with Elpaca:
  (use-package dashboard
  :config
  (add-hook 'elpaca-after-init-hook #'dashboard-insert-startupify-lists)
  (add-hook 'elpaca-after-init-hook #'dashboard-initialize)
  (dashboard-setup-startup-hook))

  (setq dashboard-startup-banner "/home/sahil/repos/config/emacs/brain2.png")
  (setq dashboard-init-info "")
  (setq dashboard-set-footer nil)
  (setq dashboard-set-init-info t)

  (setq dashboard-items nil)
#+end_src

#+RESULTS:

** Transparency Settings

#+begin_src emacs-lisp
  (defvar efs/frame-transparency '(90 . 90))
  (set-frame-parameter (selected-frame) 'alpha efs/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,efs/frame-transparency))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
#+end_src

#+RESULTS:

** Bookmarking

#+begin_src emacs-lisp
  (require 'bookmark)
  (defun jump-to-nth-bookmark (n)
  ;; "Jump to the nth bookmark in the bookmarks list."
  (bookmark-maybe-load-default-file)
  (let ((bookmark-names (bookmark-all-names)))
    (when (and bookmark-names
	       (<= n (length bookmark-names)))
      (bookmark-jump (nth (1- n) bookmark-names)))))

#+end_src

#+RESULTS:
: jump-to-nth-bookmark

** TODO Mail Client (mu4e)

#+begin_src emacs-lisp

#+end_src

** TODO EXWM (emacs X window manager)

#+begin_src emacs-lisp
  ;; exwm for emacs :) Sweet Sweet emacs
#+end_src

** TODO Fonts

#+begin_src emacs-lisp
  ;; change the default font size
  (set-face-attribute 'default nil :height 137)
#+end_src

#+RESULTS:

** TODO Flying Cursor
** TODO Which-Key

#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+end_src

#+RESULTS:

* Org Mode 
** Org Bullets and Ellipsis

#+begin_src emacs-lisp
  (use-package org-bullets
  :ensure t
  :init
  (setq org-bullets-face-name "JetBrainsMono Nerd Font")
  (setq org-bullets-bullet-list
	'("◉" "✸" "●" "►" "✿" "◇"))
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  (setq org-ellipsis "")
#+end_src

** Org Babel and autoindent

#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
  (setq org-adapt-indentation t)  ;; autoindent under headings
  (setq make-backup-files nil)    ;; autosave == nil
#+end_src

** Visual Fill Column

#+begin_src emacs-lisp
  (use-package visual-fill-column
  :ensure t
  :config
  (setq visual-fill-column-width 120
	visual-fill-column-center-text t)
  :init
  (visual-fill-column-mode t))

  (defun add-fill-column ()
  (setq visual-fill-column-width 120)
  (setq visual-fill-column-center-text t)
  (visual-fill-column-mode t))

  (add-hook 'org-mode-hook 'add-fill-column)

#+end_src

** Hide Sourceblock Markers

#+begin_src emacs-lisp
  ;; Org mode
  (add-hook 'org-mode-hook
	    '(lambda ()

	       ;; Unset any previous customization for the background color
	       (set-face-attribute 'org-block-begin-line nil :background 'unspecified)
	       (set-face-attribute 'org-block-end-line nil :background 'unspecified)

	       ;; Set the foreground color to the value of the background color
	       (set-face-attribute 'org-block-begin-line nil
				   :foreground (face-background 'org-block-begin-line nil 'default))
	       (set-face-attribute 'org-block-end-line nil
				   :foreground (face-background 'org-block-end-line nil 'default))
	       ))
#+end_src

#+RESULTS:
| (lambda nil (set-face-attribute 'org-block-begin-line nil :background 'unspecified) (set-face-attribute 'org-block-end-line nil :background 'unspecified) (set-face-attribute 'org-block-begin-line nil :foreground (face-background 'org-block-begin-line nil 'default)) (set-face-attribute 'org-block-end-line nil :foreground (face-background 'org-block-end-line nil 'default))) | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-fold-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

** Presevre Indentation (Org-Mode)

#+begin_src emacs-lisp
  ;; word wrapping
  (setq word-wrapping t)
  (setq word-wrap t)
  (setq org-src-tab-acts-natively nil)
  (setq evil-want-C-i-jump t)
  (setq org-src-preserve-indentation t)

  ;; use spaces instead of tabs while indenting
  (setq-default indent-tabs-mode nil)
#+end_src

** Evil Commentry (comment with gc)

#+begin_src emacs-lisp
  ;;Install evil-commentary if you haven't already
  (use-package evil-commentary
  :ensure t
  :config
  (evil-commentary-mode))

  ;; Optional: Map 'gc' in visual mode to comment/uncomment
  (define-key evil-visual-state-map "gc" 'evil-commentary)

#+end_src

#+RESULTS:
: evil-commentary

** TODO Org-Roam

#+begin_src emacs-lisp

#+end_src

** TODO Org-Present

#+begin_src emacs-lisp
  ;; https://github.com/rlister/org-present/tree/master
  ;; And when inline images are shown in the slides, it's charming
#+end_src

** TODO Org-Publish
** TODO Org-Appear

#+begin_src emacs-lisp
  (use-package org-appear
  :ensure t
  :config
  (setq org-appear-autoemphasis t)
  (setq org-hide-emphasis-markers t)
  (setq org-appear-autolinks t)
  (setq org-link-descriptive t)
  :init
  (add-hook 'org-mode-hook 'org-appear-mode))
#+end_src

** TODO Org-padding

#+begin_src emacs-lisp
#+end_src

** TODO Org-Excalidraw

#+begin_src emacs-lisp

#+end_src

* Developement
** RainBow Mode

#+begin_src emacs-lisp
  (use-package rainbow-mode
  :ensure t
  :config
  (setq rainbow-mode t))
#+end_src

** AutoPair and symlinks

#+begin_src emacs-lisp
  (electric-pair-mode 1)
  (setq vc-follow-symlinks t)
#+end_src

** TODO Treesitter

#+begin_src emacs-lisp
  ;; treesitter
#+end_src

** TODO C-C++ LSP

#+begin_src emacs-lisp
  ;; C-CPP lsp
#+end_src

** TODO Python LSP

#+begin_src emacs-lisp
  ;; python lsp
#+end_src

** TODO Java LSP

#+begin_src emacs-lisp
  ;; java lsp
#+end_src

** TODO Snippet-Engine and Snippets

#+begin_src emacs-lisp
  ;; snippets
#+end_src

** TODO Fuzzy Finder 

#+begin_src emacs-lisp
  ;; fuzzy finder like telescope (or similar to that)
#+end_src

** TODO Magit (Git Client)

#+begin_src emacs-lisp
  ;; magit just for git diff's and reviewing before pushing.
  ;; Nothing can beat the commandline still!
#+end_src

** TODO Terminals and Shells

#+begin_src emacs-lisp
  (use-package vterm
  :ensure t)
#+end_src

** TODO File Tree

#+begin_src emacs-lisp

#+end_src

** TODO Indentation Lines

#+begin_src emacs-lisp

#+end_src

** TODO Tabs/Buffers

#+begin_src emacs-lisp

#+end_src

** TODO Debugger

#+begin_src emacs-lisp

#+end_src

** TODO Org-Babel

#+begin_src emacs-lisp

#+end_src

** Empty

#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp

#+end_src


#+begin_src sql

#+end_src




